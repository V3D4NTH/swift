
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftplusminusleftmultiplydivideadd and arrow bool comma ddot divide else equals equals_equals for func ge gt id if int lcparent le let lparent lt minus multiply newline not_equal or plus rcparent return rparent semicolon sub var whileprogram : dekl_list\n    dekl_list : dekl\n              | expression\n              | dekl dekl_list\n              | block\n\n    \n    dekl :   var var_dekl\n    | let var_dekl\n    | fun_dekl\n    \n    var_dekl : id ddot dtype semicolon\n    | id ddot dtype equals expression semicolon\n    \n    dtype : int\n    | bool\n    \n    expression : expression minus term\n    | expression plus term\n    | term\n    \n    term : term multiply factor\n    |  term divide factor\n    | factor\n    \n    factor : lparent expression rparent\n    | minus expression\n    | val\n    | call\n    empty : \n    call : id lparent arguments rparent semicolon\n         | id lparent rparent semicolon\n    \n    val : int\n    |   id\n    \n    fun_dekl : func id lparent params rparent arrow dtype comp_block\n\n    \n    params : params_var\n    | empty\n    \n    params_var : id ddot dtype comma params_var\n               | id ddot dtype\n    \n    arguments : val comma arguments\n    |   val\n    \n    comp_block : lcparent block rcparent\n    \n    block : comp_block block\n        | loop_block block\n        | cond_block block\n        | ass_exp semicolon block\n        | dekl block\n        | return expression semicolon\n    \n    loop_block : for lparent loop_var condition semicolon step semicolon rparent\n    \n    cond_block : if lparent condition rparent comp_block\n    |            if lparent condition rparent comp_block else comp_block\n    \n    loop_var : var_dekl\n    | id\n    \n    step : id add int\n    | id sub int\n    \n    condition : expression relation_operator expression\n    \n    ass_exp : var id ddot dtype equals expression\n    |   let id ddot dtype equals expression\n    | id equals expression\n    \n    relation_operator : equals_equals\n    | lt\n    | gt\n    | le\n    | ge\n    | not_equal\n    '
    
_lr_action_items = {'var':([0,3,8,11,12,13,20,30,32,39,45,70,98,106,116,123,125,126,],[6,6,-8,40,40,40,40,-6,-7,40,40,-35,-9,-43,-10,-44,-28,-42,]),'let':([0,3,8,11,12,13,20,30,32,39,45,70,98,106,116,123,125,126,],[7,7,-8,42,42,42,42,-6,-7,42,42,-35,-9,-43,-10,-44,-28,-42,]),'return':([0,3,8,11,12,13,20,30,32,39,45,70,98,106,116,123,125,126,],[15,15,-8,15,15,15,15,-6,-7,15,15,-35,-9,-43,-10,-44,-28,-42,]),'func':([0,3,8,11,12,13,20,30,32,39,45,70,98,106,116,123,125,126,],[16,16,-8,16,16,16,16,-6,-7,16,16,-35,-9,-43,-10,-44,-28,-42,]),'lcparent':([0,3,8,11,12,13,20,30,32,39,45,70,77,78,89,98,106,115,116,118,123,125,126,],[20,20,-8,20,20,20,20,-6,-7,20,20,-35,-11,-12,20,-9,-43,20,-10,20,-44,-28,-42,]),'for':([0,3,8,11,12,13,20,30,32,39,45,70,98,106,116,123,125,126,],[21,21,-8,21,21,21,21,-6,-7,21,21,-35,-9,-43,-10,-44,-28,-42,]),'if':([0,3,8,11,12,13,20,30,32,39,45,70,98,106,116,123,125,126,],[22,22,-8,22,22,22,22,-6,-7,22,22,-35,-9,-43,-10,-44,-28,-42,]),'id':([0,3,6,7,8,9,11,12,13,15,16,18,20,28,29,30,32,36,37,39,40,42,45,48,49,52,53,63,70,71,72,73,86,90,91,92,93,94,95,96,97,98,99,104,106,114,116,117,123,125,126,],[17,17,31,33,-8,35,41,41,41,35,47,35,41,35,35,-6,-7,35,35,41,31,33,41,35,65,73,35,80,-35,35,-45,-46,65,35,-53,-54,-55,-56,-57,-58,35,-9,35,113,-43,35,-10,80,-44,-28,-42,]),'lparent':([0,3,8,9,15,17,18,21,22,28,29,30,32,35,36,37,47,48,53,70,71,72,73,90,91,92,93,94,95,96,97,98,99,114,116,125,],[18,18,-8,18,18,49,18,52,53,18,18,-6,-7,49,18,18,63,18,18,-35,18,-45,-46,18,-53,-54,-55,-56,-57,-58,18,-9,18,18,-10,-28,]),'minus':([0,3,4,8,9,10,15,17,18,19,23,24,25,28,29,30,32,34,35,36,37,46,48,50,53,54,55,58,59,64,69,70,71,72,73,75,85,90,91,92,93,94,95,96,97,98,99,102,107,108,109,114,116,122,125,],[9,9,28,-8,9,-15,9,-27,9,-18,-21,-22,-26,9,9,-6,-7,-20,-27,9,9,28,9,28,9,-13,-14,-16,-17,28,-19,-35,9,-45,-46,28,-25,9,-53,-54,-55,-56,-57,-58,9,-9,9,-24,28,28,28,9,-10,28,-28,]),'int':([0,3,8,9,15,18,28,29,30,32,36,37,48,49,53,56,57,70,71,72,73,86,88,90,91,92,93,94,95,96,97,98,99,100,111,114,116,120,121,125,],[25,25,-8,25,25,25,25,25,-6,-7,25,25,25,25,25,77,77,-35,25,-45,-46,25,77,25,-53,-54,-55,-56,-57,-58,25,-9,25,77,77,25,-10,127,128,-28,]),'$end':([1,2,3,4,5,8,10,17,19,23,24,25,26,27,30,32,34,35,38,43,44,54,55,58,59,60,61,62,69,70,85,98,102,116,125,],[0,-1,-2,-3,-5,-8,-15,-27,-18,-21,-22,-26,-4,-5,-6,-7,-20,-27,-36,-37,-38,-13,-14,-16,-17,-40,-39,-41,-19,-35,-25,-9,-24,-10,-28,]),'plus':([4,10,17,19,23,24,25,34,35,46,50,54,55,58,59,64,69,75,85,102,107,108,109,122,],[29,-15,-27,-18,-21,-22,-26,-20,-27,29,29,-13,-14,-16,-17,29,-19,29,-25,-24,29,29,29,29,]),'multiply':([10,17,19,23,24,25,34,35,54,55,58,59,69,85,102,],[36,-27,-18,-21,-22,-26,-20,-27,36,36,-16,-17,-19,-25,-24,]),'divide':([10,17,19,23,24,25,34,35,54,55,58,59,69,85,102,],[37,-27,-18,-21,-22,-26,-20,-27,37,37,-16,-17,-19,-25,-24,]),'semicolon':([10,14,19,23,24,25,34,35,46,54,55,58,59,64,67,69,76,77,78,79,84,85,87,102,105,107,108,109,112,122,127,128,],[-15,45,-18,-21,-22,-26,-20,-27,62,-13,-14,-16,-17,-52,85,-19,98,-11,-12,98,102,-25,104,-24,98,-49,116,116,119,116,-47,-48,]),'rparent':([10,19,23,24,25,34,35,49,50,54,55,58,59,63,65,66,68,69,74,77,78,81,82,83,85,102,103,107,110,119,124,],[-15,-18,-21,-22,-26,-20,-27,67,69,-13,-14,-16,-17,-23,-27,84,-34,-19,89,-11,-12,101,-29,-30,-25,-24,-33,-49,-32,126,-31,]),'equals_equals':([10,19,23,24,25,34,35,54,55,58,59,69,75,85,102,],[-15,-18,-21,-22,-26,-20,-27,-13,-14,-16,-17,-19,91,-25,-24,]),'lt':([10,19,23,24,25,34,35,54,55,58,59,69,75,85,102,],[-15,-18,-21,-22,-26,-20,-27,-13,-14,-16,-17,-19,92,-25,-24,]),'gt':([10,19,23,24,25,34,35,54,55,58,59,69,75,85,102,],[-15,-18,-21,-22,-26,-20,-27,-13,-14,-16,-17,-19,93,-25,-24,]),'le':([10,19,23,24,25,34,35,54,55,58,59,69,75,85,102,],[-15,-18,-21,-22,-26,-20,-27,-13,-14,-16,-17,-19,94,-25,-24,]),'ge':([10,19,23,24,25,34,35,54,55,58,59,69,75,85,102,],[-15,-18,-21,-22,-26,-20,-27,-13,-14,-16,-17,-19,95,-25,-24,]),'not_equal':([10,19,23,24,25,34,35,54,55,58,59,69,75,85,102,],[-15,-18,-21,-22,-26,-20,-27,-13,-14,-16,-17,-19,96,-25,-24,]),'equals':([17,41,76,77,78,79,105,],[48,48,97,-11,-12,99,114,]),'comma':([25,65,68,77,78,110,],[-26,-27,86,-11,-12,117,]),'ddot':([31,33,73,80,],[56,57,88,100,]),'rcparent':([38,43,44,51,60,61,62,],[-36,-37,-38,70,-40,-39,-41,]),'bool':([56,57,88,100,111,],[78,78,78,78,78,]),'else':([70,106,],[-35,115,]),'arrow':([101,],[111,]),'add':([113,],[120,]),'sub':([113,],[121,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'dekl_list':([0,3,],[2,26,]),'dekl':([0,3,11,12,13,20,39,45,],[3,3,39,39,39,39,39,39,]),'expression':([0,3,9,15,18,48,53,71,90,97,99,114,],[4,4,34,46,50,64,75,75,107,108,109,122,]),'block':([0,3,11,12,13,20,39,45,],[5,27,38,43,44,51,60,61,]),'fun_dekl':([0,3,11,12,13,20,39,45,],[8,8,8,8,8,8,8,8,]),'term':([0,3,9,15,18,28,29,48,53,71,90,97,99,114,],[10,10,10,10,10,54,55,10,10,10,10,10,10,10,]),'comp_block':([0,3,11,12,13,20,39,45,89,115,118,],[11,11,11,11,11,11,11,11,106,123,125,]),'loop_block':([0,3,11,12,13,20,39,45,],[12,12,12,12,12,12,12,12,]),'cond_block':([0,3,11,12,13,20,39,45,],[13,13,13,13,13,13,13,13,]),'ass_exp':([0,3,11,12,13,20,39,45,],[14,14,14,14,14,14,14,14,]),'factor':([0,3,9,15,18,28,29,36,37,48,53,71,90,97,99,114,],[19,19,19,19,19,19,19,58,59,19,19,19,19,19,19,19,]),'val':([0,3,9,15,18,28,29,36,37,48,49,53,71,86,90,97,99,114,],[23,23,23,23,23,23,23,23,23,23,68,23,23,68,23,23,23,23,]),'call':([0,3,9,15,18,28,29,36,37,48,53,71,90,97,99,114,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'var_dekl':([6,7,40,42,52,],[30,32,30,32,72,]),'arguments':([49,86,],[66,103,]),'loop_var':([52,],[71,]),'condition':([53,71,],[74,87,]),'dtype':([56,57,88,100,111,],[76,79,105,110,118,]),'params':([63,],[81,]),'params_var':([63,117,],[82,124,]),'empty':([63,],[83,]),'relation_operator':([75,],[90,]),'step':([104,],[112,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> dekl_list','program',1,'p_program','parser.py',15),
  ('dekl_list -> dekl','dekl_list',1,'p_dekl_list','parser.py',21),
  ('dekl_list -> expression','dekl_list',1,'p_dekl_list','parser.py',22),
  ('dekl_list -> dekl dekl_list','dekl_list',2,'p_dekl_list','parser.py',23),
  ('dekl_list -> block','dekl_list',1,'p_dekl_list','parser.py',24),
  ('dekl -> var var_dekl','dekl',2,'p_dekl','parser.py',34),
  ('dekl -> let var_dekl','dekl',2,'p_dekl','parser.py',35),
  ('dekl -> fun_dekl','dekl',1,'p_dekl','parser.py',36),
  ('var_dekl -> id ddot dtype semicolon','var_dekl',4,'p_var_dekl','parser.py',46),
  ('var_dekl -> id ddot dtype equals expression semicolon','var_dekl',6,'p_var_dekl','parser.py',47),
  ('dtype -> int','dtype',1,'p_dtype','parser.py',56),
  ('dtype -> bool','dtype',1,'p_dtype','parser.py',57),
  ('expression -> expression minus term','expression',3,'p_expression','parser.py',66),
  ('expression -> expression plus term','expression',3,'p_expression','parser.py',67),
  ('expression -> term','expression',1,'p_expression','parser.py',68),
  ('term -> term multiply factor','term',3,'p_term','parser.py',79),
  ('term -> term divide factor','term',3,'p_term','parser.py',80),
  ('term -> factor','term',1,'p_term','parser.py',81),
  ('factor -> lparent expression rparent','factor',3,'p_factor','parser.py',92),
  ('factor -> minus expression','factor',2,'p_factor','parser.py',93),
  ('factor -> val','factor',1,'p_factor','parser.py',94),
  ('factor -> call','factor',1,'p_factor','parser.py',95),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',106),
  ('call -> id lparent arguments rparent semicolon','call',5,'p_call','parser.py',112),
  ('call -> id lparent rparent semicolon','call',4,'p_call','parser.py',113),
  ('val -> int','val',1,'p_val','parser.py',121),
  ('val -> id','val',1,'p_val','parser.py',122),
  ('fun_dekl -> func id lparent params rparent arrow dtype comp_block','fun_dekl',8,'p_fun_dekl','parser.py',131),
  ('params -> params_var','params',1,'p_params','parser.py',139),
  ('params -> empty','params',1,'p_params','parser.py',140),
  ('params_var -> id ddot dtype comma params_var','params_var',5,'p_params_var','parser.py',147),
  ('params_var -> id ddot dtype','params_var',3,'p_params_var','parser.py',148),
  ('arguments -> val comma arguments','arguments',3,'p_arguments','parser.py',155),
  ('arguments -> val','arguments',1,'p_arguments','parser.py',156),
  ('comp_block -> lcparent block rcparent','comp_block',3,'p_comp_block','parser.py',163),
  ('block -> comp_block block','block',2,'p_block','parser.py',171),
  ('block -> loop_block block','block',2,'p_block','parser.py',172),
  ('block -> cond_block block','block',2,'p_block','parser.py',173),
  ('block -> ass_exp semicolon block','block',3,'p_block','parser.py',174),
  ('block -> dekl block','block',2,'p_block','parser.py',175),
  ('block -> return expression semicolon','block',3,'p_block','parser.py',176),
  ('loop_block -> for lparent loop_var condition semicolon step semicolon rparent','loop_block',8,'p_loop_block','parser.py',187),
  ('cond_block -> if lparent condition rparent comp_block','cond_block',5,'p_cond_block','parser.py',193),
  ('cond_block -> if lparent condition rparent comp_block else comp_block','cond_block',7,'p_cond_block','parser.py',194),
  ('loop_var -> var_dekl','loop_var',1,'p_loop_var','parser.py',204),
  ('loop_var -> id','loop_var',1,'p_loop_var','parser.py',205),
  ('step -> id add int','step',3,'p_step','parser.py',211),
  ('step -> id sub int','step',3,'p_step','parser.py',212),
  ('condition -> expression relation_operator expression','condition',3,'p_condition','parser.py',223),
  ('ass_exp -> var id ddot dtype equals expression','ass_exp',6,'p_ass_expression','parser.py',230),
  ('ass_exp -> let id ddot dtype equals expression','ass_exp',6,'p_ass_expression','parser.py',231),
  ('ass_exp -> id equals expression','ass_exp',3,'p_ass_expression','parser.py',232),
  ('relation_operator -> equals_equals','relation_operator',1,'p_relation_operator','parser.py',240),
  ('relation_operator -> lt','relation_operator',1,'p_relation_operator','parser.py',241),
  ('relation_operator -> gt','relation_operator',1,'p_relation_operator','parser.py',242),
  ('relation_operator -> le','relation_operator',1,'p_relation_operator','parser.py',243),
  ('relation_operator -> ge','relation_operator',1,'p_relation_operator','parser.py',244),
  ('relation_operator -> not_equal','relation_operator',1,'p_relation_operator','parser.py',245),
]
