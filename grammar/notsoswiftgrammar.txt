[program] := [dekl_list]
[dekl_list] := [dekl] || [dekl][dekl_list]
[dekl] := const [var_dekl]; || [var_dekl];|| [fun_dekl]
[var_dekl] := [dtype] id || [dtype] id = [expr]
[fun_dekl] := func id([params]) -> [dtype][comp_block]
[params] := [params_var]|| ee
[params_var] := [dtype] id,[params_var] || [dtype] id

[expr] := [term]+[term] || [term]-[term] || [term]
[term] := [expr] * [factor] || [exp] / [factor] || [factor]
[factor] := ([expr]) || -[exp] || [val] || [call]

[call] := id([arguments]); || id();
[arguments] := [val],[arguments] || [val]
[block] := [comp_block] || [loop_block] || [cond_block] || [ass_exp];[block] || return [gen_exp];
[comp_block] := {[block]}
[loop_block] := for([loop_var];[condition];[step];)[comp_block]
[cond_block] := if([condition])[comp_block] || if([condition])[comp_block]else[comp_block]
[loop_var] := [var_dekl] || id
[step] := id += digit || id -= digit
[condition] := [gen_exp] [relation_operator] [gen_exp]
[ass_exp] := [dtype] id = [expr] || id = [expr]
[gen_exp] := id || [expr]
[relation_operator] := == || < || > || >= || <= || !=
[math_operators] := * || + || - || /
[val] := id || digit
[dtype] := int || bool
 


digit := ^-?[0-9]+$
id := ^[A-Za-z][A-Za-z0-9\_]*$
